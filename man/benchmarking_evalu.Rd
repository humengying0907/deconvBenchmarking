% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/benchmarking.R
\name{benchmarking_evalu}
\alias{benchmarking_evalu}
\title{Evaluate deconvolution performance}
\usage{
benchmarking_evalu(deconvResults_obj, nonzero_threshold = 0.05)
}
\arguments{
\item{deconvResults_obj}{a deconvResults_obj returned from deconvResults_obj() function}

\item{nonzero_threshold}{The threshold percentage of non-zero count in the simulated fraction. Only cell types with a non-zero count percentage equal to
or higher than this threshold will be included for comparing their deconvolution performance.}
}
\value{
a list of performance evaluation statistics including per-cell type correlation and RMSE values, specified for each simulated bulk expression
}
\description{
This function evaluates deconvolution performance on the deconvResults_obj returned from benchmarking_deconv() function.
}
\examples{
\dontrun{
# a complete pipeline to benchmarking deconvolution methods using bulk data simulated under various strategies

# first create a benchmarking_obj using benchmarking_init():
# a standard benchmarking pipeline
benchmarking_init(scExpr = scExpr,
                  scMeta = scMeta,
                  colnames_of_cellType = 'cell_type',
                  colnames_of_sample = 'sampleID',

                  # argument for fracSimulator_Beta()
                  nbulk = 100,
                  fixed_cell_type = 'malignant',

                  # argument for training/testing splitting:
                  training_ratio = 0.5,
                  split_by = "cell",

                  # arguments for bulk simulation: select bulk simulation methods
                  bulkSimulator_methods = c('homo','semi','heter','heter_sampleIDfree','favilaco','immunedeconv','SCDC'),

                  # argument required for semi/heter_sampleIDfree bulk simulation method
                  heter_cell_type = 'malignant',

                  # general simulation parameters
                  ncells_perSample = 500,
                  min_chunkSize = 20,
                  use_chunk = 'random',

                  # parameters for adjusting heterogeneity in sample ID-free bulk simulation
                  dirichlet_cs_par = 0.1,
                  min.subcluster.size = 20,
                  max.num.cs = NA,

                  # argument for marker constructions
                  refMarkers_methods = c('limma','scran'),

                  # arguments for signature matrics construction
                  refMatrix_methods = c('raw','limma','scran'),

                  # arguments to include tcga
                  include_tcga = T,
                  tcga_abbreviation = 'SKCM',
                  purity_methods =  c('ESTIMATE', 'ABSOLUTE', 'LUMP', 'IHC', 'CPE','ABSOLUTE_GDC'),

                  # export files for autogeneS and cibersortx
                  create_autogeneS_input = T,
                  create_cibersortx_input = T,

                  n.core = 4
                  )

# perform deconvolution on the benchmarking_obj using all categories of deconvolution methods, which includes:
# 1) marker-based methods: 'firstPC','gsva','debCAM','TOAST'
# 2) regression-based methods: 'nnls','cibersort','MuSiC','wRLM','RPC'
# 3) reference free methods: 'linseed','debCAM'
# 4) Bayesian-based methods: 'InstaPrism
# 5) other deconvolution methods from immunedeconv package:
#     'xcell','mcp_counter','epic','quantiseq','timer','abis','consensus_tme','estimate'

benchmarking_deconv(benchmarking_obj,

                    # arguments for marker based methods
                    marker_based_methods = c('firstPC','gsva','debCAM','TOAST'),

                    # arguments for regression-based methods
                    regression_based_methods =  c('nnls','cibersort','MuSiC','wRLM','RPC'),
                    cibersort_path = 'scripts/', # argument required for 'cibersort' method
                    scExpr = scExpr, # arguments required for 'MuSiC'
                    scMeta = scMeta,
                    colnames_of_cellType = 'cell_type',
                    colnames_of_sample = 'sampleID',

                    # arguments for reference-free methods
                    refFree_methods = c('linseed','debCAM'),

                    # arguments for Bayesian-based methods
                    Bayesian_methods = c('InstaPrism'),
                    key = 'malignant',  # this argument togther with 'colnames_of_sample' is highly recommended to run Bayesian based methods

                    # arguments for other deconvolution methods
                    immunedeconv_methods = c('xcell','mcp_counter','epic','quantiseq','timer','abis','consensus_tme','estimate'),
                    tcga_abbreviation = 'SKCM', # arguments required for 'timer' and 'consensus_tme'


                    n.core = 4)

# evaluate the performance of each deconvolution methods:
benchmarking_evalu(deconvResults_obj)
}
}
